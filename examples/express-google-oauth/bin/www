#!/usr/bin/env node

require('babel-register');

const http = require('http');
const debug = require('debug')('express-google-oauth:server');
const MemoryPersistence = require('../../../persistence/memory');
const SyncedDBBackend = require('../../../backend');
const app = require('../src/express').default;
const wsHandlers = require('../src/ws-handlers').default;

const server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);

MemoryPersistence.create().then((store) => {
  const ws = new SyncedDBBackend({
    store,
    server
  });
  // Object.assign(ws.handlers, wsHandlers);
  server.listen(app.get('port'));
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
